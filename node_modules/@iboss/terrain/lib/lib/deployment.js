"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = exports.instantiate = exports.storeCode = void 0;
const terra_js_1 = require("@terra-money/terra.js");
const child_process_1 = require("child_process");
const config_1 = require("../config");
const fs = require("fs-extra");
const cli_ux_1 = require("cli-ux");
const YAML = require("yaml");
exports.storeCode = async ({ conf, noRebuild, contract, signer, network, refsPath, lcd, codeId, }) => {
    process.chdir(`contracts/${contract}`);
    if (!noRebuild) {
        child_process_1.execSync("cargo wasm", { stdio: "inherit" });
        child_process_1.execSync("cargo run-script optimize", { stdio: "inherit" });
    }
    const wasmByteCode = fs
        .readFileSync(`artifacts/${contract.replace(/-/g, "_")}.wasm`)
        .toString("base64");
    cli_ux_1.cli.action.start("storing wasm bytecode on chain");
    const store = conf.store;
    const storeCodeTx = await signer.createAndSignTx({
        msgs: [
            typeof codeId !== "undefined"
                ? new terra_js_1.MsgMigrateCode(signer.key.accAddress, codeId, wasmByteCode)
                : new terra_js_1.MsgStoreCode(signer.key.accAddress, wasmByteCode),
        ],
        fee: new terra_js_1.Fee(store.fee.gasLimit, store.fee.amount),
    });
    const res = await lcd.tx.broadcast(storeCodeTx);
    cli_ux_1.cli.action.stop();
    try {
        const savedCodeId = JSON.parse(res.raw_log)[0]
            .events.find((msg) => msg.type === "store_code")
            .attributes.find((attr) => attr.key === "code_id").value;
        process.chdir("../..");
        const updatedRefs = config_1.setCodeId(network, contract, savedCodeId)(config_1.loadRefs(refsPath));
        config_1.saveRefs(updatedRefs, refsPath);
        cli_ux_1.cli.log(`code is stored at code id: ${savedCodeId}`);
        return savedCodeId;
    }
    catch (error) {
        if (error instanceof SyntaxError) {
            cli_ux_1.cli.error(res.raw_log);
        }
        else {
            cli_ux_1.cli.error(`Unexpcted Error: ${error}`);
        }
    }
};
exports.instantiate = async ({ conf, refsPath, network, lcd, signer, admin, contract, codeId, instanceId, }) => {
    const instantiation = conf.instantiation;
    cli_ux_1.cli.action.start(`instantiating contract with code id: ${codeId}`);
    const instantiateTx = await signer.createAndSignTx({
        msgs: [
            new terra_js_1.MsgInstantiateContract(signer.key.accAddress, admin, // can migrate
            codeId, instantiation.instantiateMsg),
        ],
        fee: new terra_js_1.Fee(instantiation.fee.gasLimit, instantiation.fee.amount),
    });
    const resInstant = await lcd.tx.broadcast(instantiateTx);
    let log = [];
    try {
        log = JSON.parse(resInstant.raw_log);
    }
    catch (error) {
        cli_ux_1.cli.action.stop();
        if (error instanceof SyntaxError) {
            cli_ux_1.cli.error(resInstant.raw_log);
        }
        else {
            cli_ux_1.cli.error(`Unexpcted Error: ${error}`);
        }
    }
    cli_ux_1.cli.action.stop();
    const contractAddress = log[0].events
        .find((event) => event.type === "instantiate_contract")
        .attributes.find((attr) => attr.key === "contract_address").value;
    const updatedRefs = config_1.setContractAddress(network, contract, instanceId, contractAddress)(config_1.loadRefs(refsPath));
    config_1.saveRefs(updatedRefs, refsPath);
    cli_ux_1.cli.log(YAML.stringify(log));
};
exports.migrate = async ({ conf, refsPath, lcd, signer, contract, codeId, network, instanceId, }) => {
    const instantiation = conf.instantiation;
    cli_ux_1.cli.action.start(`instantiating contract with code id: ${codeId}`);
    const refs = config_1.loadRefs(refsPath);
    const contractAddress = refs[network][contract].contractAddresses[instanceId];
    const instantiateTx = await signer.createAndSignTx({
        msgs: [
            new terra_js_1.MsgMigrateContract(signer.key.accAddress, contractAddress, codeId, instantiation.instantiateMsg),
        ],
        fee: new terra_js_1.Fee(instantiation.fee.gasLimit, instantiation.fee.amount),
    });
    const resInstant = await lcd.tx.broadcast(instantiateTx);
    let log = [];
    try {
        log = JSON.parse(resInstant.raw_log);
    }
    catch (error) {
        cli_ux_1.cli.action.stop();
        if (error instanceof SyntaxError) {
            cli_ux_1.cli.error(resInstant.raw_log);
        }
        else {
            cli_ux_1.cli.error(`Unexpcted Error: ${error}`);
        }
    }
    cli_ux_1.cli.action.stop();
    // const contractAddress = log[0].events
    //   .find((event: { type: string }) => event.type === "instantiate_contract")
    //   .attributes.find(
    //     (attr: { key: string }) => attr.key === "contract_address"
    //   ).value;
    const updatedRefs = config_1.setContractAddress(network, contract, instanceId, contractAddress)(config_1.loadRefs(refsPath));
    config_1.saveRefs(updatedRefs, refsPath);
    cli_ux_1.cli.log(YAML.stringify(log));
};
